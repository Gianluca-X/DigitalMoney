version: '3.8'

services:
  mysql:
    container_name: mysql
    image: mysql:latest
    restart: unless-stopped
    env_file:
      - .env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${ACCOUNT_DB_DATABASE}
      MYSQL_USER: ${ACCOUNT_DB_USERNAME}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3308:3306"
    volumes:
      - mysql:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - back_network
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u root --password=${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      retries: 5
      timeout: 10s

  postgres_keycloak:
    container_name: postgres_keycloak
    image: postgres:latest
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${KEYCLOAK_DB_NAME}
      POSTGRES_USER: ${KEYCLOAK_DB_USER}
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postinit.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - back_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${KEYCLOAK_DB_USER} -d ${KEYCLOAK_DB_NAME}"]
      interval: 30s
      retries: 5
      timeout: 10s

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:latest
    command:
      - start-dev
    restart: unless-stopped
    env_file:
      - .env
    environment:
      KC_DB: postgres
      KC_DB_SCHEMA: public
      KC_DB_URL_HOST: postgres_keycloak
      KC_DB_URL_DATABASE: ${KEYCLOAK_DB_NAME}
      KC_DB_USERNAME: ${KEYCLOAK_DB_USER}
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KC_DB_URL: jdbc:postgresql://postgres_keycloak:5432/${KEYCLOAK_DB_NAME}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_HOSTNAME: localhost
      KC_FEATURES: token-exchange,admin-fine-grained-authz
    ports:
      - "9092:8080"
    depends_on:
      postgres_keycloak:
        condition: service_healthy
    networks:
      - back_network

  eureka-server:
    container_name: eureka-server
    build:
      context: .
      dockerfile: ./eureka-server/Dockerfile
    ports:
      - "8761:8761"
    networks:
      - back_network

  config-server:
    container_name: config-server
    build:
      context: .
      dockerfile: ./config-server/Dockerfile
    ports:
      - "8888:8888"
    env_file:
      - .env
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}
    depends_on:
      - eureka-server
    networks:
      - back_network

  gateway:
    container_name: gateway
    build:
      context: .
      dockerfile: ./gateway/Dockerfile
    ports:
      - "8085:8085"
    env_file:
      - .env
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}
    depends_on:
      - eureka-server
      - config-server
    networks:
      - back_network

  user-service:
    container_name: user-service
    env_file:
      - .env
    build:
      context: .
      dockerfile: ./user-service/Dockerfile
    environment:
      - SPRING_DATASOURCE_URL=${USER_DB_URL}
      - SPRING_DATASOURCE_USERNAME=${USER_DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_PASSWORD}
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=com.mysql.cj.jdbc.Driver
      - SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.MySQLDialect
    networks:
      - back_network
    depends_on:
      mysql:
        condition: service_healthy
      eureka-server:
        condition: service_started
      config-server:
        condition: service_started
    ports:
      - "8087:8087"

  accounts-service:
    container_name: accounts-service
    env_file:
      - .env
    build:
      context: .
      dockerfile: ./accounts-service/Dockerfile
    environment:
      - SPRING_DATASOURCE_URL=${ACCOUNT_DB_URL}
      - SPRING_DATASOURCE_USERNAME=${ACCOUNT_DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_PASSWORD}
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=com.mysql.cj.jdbc.Driver
      - SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.MySQLDialect
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - back_network
    ports:
      - "8084:8084"
    depends_on:
      mysql:
        condition: service_healthy
      eureka-server:
        condition: service_started
      config-server:
        condition: service_started

volumes:
  mysql:
  postgres_data:

networks:
  back_network:
    driver: bridge
